#!/usr/bin/env python3
"""
List BATS jobs on o.s.d & o3
"""

import argparse
import os
import re
import sys

import requests

from bats.debug import debugme
from bats.job import get_job


VERSION = re.compile(
    "(aardvark(?:-dns)?|buildah|netavark|podman|runc|skopeo) (?:info|version)"
)
session = requests.Session()


def get_version(title: str, info: str) -> tuple[str, str]:
    """
    Get version
    """
    package = title.split()[0]
    if package == "aardvark":
        package = "aardvark-dns"
    version = ""
    lines = info.splitlines()
    for line in lines:
        if line.split()[0] == "Version:":
            version = line.split()[-1]
            break
    if not version:
        if "version" in lines[0]:
            version = lines[0].split()[2]
        else:
            version = lines[0].split()[-1]
    return package, version


def main() -> None:
    """
    Main function
    """
    parser = argparse.ArgumentParser(
        prog="bats_version",
        description="print versions of BATS tested packages in openQA job",
    )
    parser.add_argument("url", help="openQA job")
    args = parser.parse_args()

    job = get_job(args.url, full=True)
    if job is None:
        sys.exit(f"ERROR: {args.url}")

    versions = {}
    for result in job.results:
        if not result["has_parser_text_result"]:
            for detail in result["details"]:
                if "title" not in detail:
                    continue
                if VERSION.match(detail["title"]):
                    package, version = get_version(detail["title"], detail["text_data"])
                    if package not in versions:
                        versions[package] = version

    for package in sorted(versions):
        print(package, versions[package])


if __name__ == "__main__":
    if os.getenv("DEBUG"):
        session.hooks["response"].append(debugme)
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
    finally:
        session.close()
